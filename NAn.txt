console.log(isNaN(NaN));       // true
console.log(isNaN(undefined)); // true
console.log(isNaN({}));        // true

console.log(isNaN(true));      // false
console.log(isNaN(null));      // false
console.log(isNaN(37));        // false

console.log(isNaN("37"));      // false: "37" is converted to 37
console.log(isNaN("37.37"));   // false: "37.37" is converted to 37.37
console.log(isNaN(""));        // false: empty string is converted to 0
console.log(isNaN(" "));       // false: string with a space is converted to 0

console.log(isNaN("blabla"));  // true: "blabla" is not a number


Common Arithmetic Operations

Addition Operator: This operator (+) is used to calculate the sum of two or more numbers.
Subtraction Operator: This operator (-) is used to calculate the difference between two numbers.
Multiplication Operator: This operator (*) is used to calculate the product of two or more numbers.
Division Operator: This operator (/) is used to calculate the quotient between two numbers
Division By Zero: If you try to divide by zero, JavaScript will return Infinity.
Remainder Operator: This operator(%) returns the remainder of a division.
Exponentiation Operator: This operator (**) raises one number to the power of another.
console.log(2**2):which is the same as writing 2 pow 2.

Calculations with Numbers and Strings

Explanation: When you use the + operator with a number and a string, JavaScript will coerce the 
number into a string and concatenate the two values. When you use the -, * or / operators with
a string and number, JavaScript will coerce the string into a number and the result will be a 
number. For null and undefined, JavaScript treats null as 0 and undefined as NaN in mathematical
operations.

Increment and Decrement Operators
Increment Operator: This operator is used to increase the value by one. The prefix notation ++num increases the value of the variable first, then returns a new value. The postfix notation num++ returns the current value of the variable first, then increases it.

Decrement Operator: This operator is used to decrease the value by one. The prefix notation and postfix notation work the same way as earlier with the increment operator.


Compound Assignment Operators
Addition Assignment (+=) Operator: This operator performs addition on the values and assigns the result to the variable.
Subtraction Assignment (-=) Operator: This operator performs subtraction on the values and assigns the result to the variable.
Multiplication Assignment (*=) Operator: This operator performs multiplication on the values and assigns the result to the variable.
Division Assignment (/=) Operator: This operator performs division on the values and assigns the result to the variable.
Remainder Assignment (%=) Operator: This operator divides a variable by the specified number and assigns the remainder to the variable.
Exponentiation Assignment (**=) Operator: This operator raises a variable to the power of the specified number and reassigns the result to the variable.

Booleans and Equality
Boolean Definition: A boolean is a data type that can only have two values: true or false.
Equality (==) Operator: This operator uses type coercion before checking if the values are equal.

Strict Equality (===) Operator: This operator does not perform type coercion and checks if both the types and values are equal.
Inequality (!=) Operator: This operator uses type coercion before checking if the values are not equal.
Strict Inequality (!==) Operator: This operator does not perform type coercion and checks if both the types and values are not equal.

Comparison Operators
Greater Than (>) Operator: This operator checks if the value on the left is greater than the one on the right.
Greater Than (>=) or Equal Operator: This operator checks if the value on the left is greater than or equal to the one on the right.
Less Than (<) Operator: This operator checks if the value on the left is less than the one on the right.
Less Than (<=) or Equal Operator: This operator checks if the value on the left is less than or equal to the one on the right.

Unary Operators
Unary Plus Operator: This operator converts its operand into a number. If the operand is already a number, it remains unchanged.
Unary Negation (-) Operator: This operator negates the operand.
Logical NOT (!) Operator: This operator flips the boolean value of its operand. So, if the operand is true, it becomes false, and if it's false, it becomes true. 

Bitwise Operators
Bitwise AND (&) Operator: This operator returns a 1 in each bit position for which the corresponding bits of both operands are 1.
Bitwise AND Assignment (&=) Operator: This operator performs a bitwise AND operation with the specified number and reassigns the result to the variable.
Bitwise OR (|) Operator: This operator returns a 1 in each bit position for which the corresponding bits of either or both operands are 1.
Bitwise OR Assignment (|=) Operator: This operator performs a bitwise OR operation with the specified number and reassigns the result to the variable.
Bitwise XOR (^) Operator: This operator returns a 1 in each bit position for which the corresponding bits of either, but not both, operands are 1.
Bitwise NOT (~) Operator: This operator inverts the binary representation of a number.
Left Shift (<<) Operator: This operator shifts all bits to the left by a specified number of positions.
Right Shift (>>) Operator: This operator shifts all bits to the right.

Conditional Statements, Truthy Values, Falsy Values and the Ternary Operator
if/else if/else: An if statement takes a condition and runs a block of code if that condition is truthy. If the condition is false, then it moves to the else if block. If none of those conditions are true, then it will execute the else clause. Truthy values are any values that result in true when evaluated in a Boolean context like an if statement. Falsy values are values that evaluate to false in a Boolean context.
Ternary Operator: This operator is often used as a shorter way to write if else statements.
Binary Logical Operators
Logical AND (&&) Operator: This operator checks if both operands are true. If both are true, then it will return the second value. If either operand is falsy, then it will return the falsy value. If both operands are falsy, it will return the first falsy value.
Logical OR (||) Operator: This operator checks if at least one of the operands is truthy. 
Nullish Coalescing (??) Operator: This operator will return a value only if the first one is null or undefined.
The Math Object
The Math.random() Method: This method generates a random floating-point number between 0 (inclusive) and 1 (exclusive). This means the possible output can be 0, but it will never actually reach 1.
The Math.max() Method: This method takes a set of numbers and returns the maximum value.
The Math.min() Method: This method takes a set of numbers and returns the minimum value.
The Math.ceil() Method: This method rounds a value up to the nearest whole integer.
The Math.floor() Method: This method rounds a value down to the nearest whole integer.
The Math.round() Method: This method rounds a value to the nearest whole integer.
The Math.trunc() Method: This method removes the decimal part of a number, returning only the integer portion, without rounding.
The Math.sqrt() Method: This method will return the square root of a number.
The Math.cbrt() Method: This method will return the cube root of a number.
The Math.abs() Method: This method will return the absolute value of a number.
The Math.pow() Method: This method takes two numbers and raises the first to the power of the second.

Common Number Methods
isNaN(): NaN stands for "Not-a-Number". It's a special value that represents an unrepresentable or undefined numerical result. The isNaN() function property is used to determine whether a value is NaN or not. Number.isNaN() provides a more reliable way to check for NaN values, especially in cases where type coercion might lead to unexpected results with the global isNaN() function.
The parseFloat() Method: This method parses a string argument and returns a floating-point number. It's designed to extract a number from the beginning of a string, even if the string contains non-numeric characters later on.
The parseInt() Method: This method parses a string argument and returns an integer. parseInt() stops parsing at the first non-digit it encounters. For floating-point numbers, it returns only the integer part. If it can't find a valid integer at the start of the string, it returns NaN.
The toFixed() Method: This method is called on a number and takes one optional argument, which is the number of digits to appear after the decimal point. It returns a string representation of the number with the specified number of decimal places.


we have nine unary operators in js 
+, -, ++, --, !, ~, typeof, void, delete
the all bitwise operators are not the unary operators but only the bitwise not is the unary operator